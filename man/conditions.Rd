% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helperFunctions.R
\encoding{UTF-8}
\name{conditions}
\alias{conditions}
\title{scapesClassification conditions}
\usage{
conditions(names_attTbl, cond, silent = FALSE)
}
\arguments{
\item{names_attTbl}{character vector, the column (i.e. variable) names of the
attribute table returned by the function \code{\link{attTbl}}.}

\item{cond}{character string, the condition string used by the \code{cond.*}
functions to classify raster cells (see \code{\link{conditions}}).}

\item{silent}{logic, when true, the function returns only error messages.}
}
\value{
An error message if the function finds spelling or syntax errors or a
a string with the types of rules that were detected in the argument
\code{cond}.
}
\description{
Check for spelling and syntax errors in conditions (\code{cond} argument) and
detect the type of conditions being used.
}
\details{
\strong{Conditions (or classification rules)}
\itemize{
\item Classification rules evaluate either to true or false and determine what
raster cells belong to a class.
\item Conditions are passed to \code{scapesClassification} functions as a
single character string. They can consist of combination of arithmetic
\code{(+|-|*|/|^|\%\%|\%/\%)}, relational \code{(>|<|>=|<=|==|!=|\%/\%)} and
logic operators \code{(&||)}, base R functions (e.g.,
\code{abs(variable_name)}), variables names (as named in the attribute
table, see \code{\link{attTbl}}) and previous classifications (either
stored as \code{classVector} or as rasters).
\item A combination of absolute and relative conditions can be used, but only
\emph{\strong{one neighborhood condition per string}} is allowed.
}

\cr \strong{Class vectors}
\itemize{
\item Class vectors map raster cells to numeric classes.
\item The n^th^ element of a class vector stores the class of the raster cell
stored in the n^th^ row of the corresponding attribute table (see
\code{\link{attTbl}}).
\item Class vectors can serve also as a function input. As inputs, they provide
information about the groups of cells that have already been classified.
\item Every time a class vector is provided as a function input, it is
\emph{updated} by assigning a numeric class to \emph{unclassified cells} that meet
function conditions.
\item Unclassified cells are represented as NA values.
}

\cr \strong{Rule evaluation}
\itemize{
\item One of the arguments of the classification functions is the
\code{classVector}, a numeric vector that identifies what raster cells have
already been classified (non-NA values) and what have yet to be classified
(NA values). Cells that have already been classified are excluded from the
rule evaluation unless the argument \code{'overwrite_class = TRUE'}.
\item \strong{Global evaluation} \cr Classification rules are applied to all raster
cells (excluding the classified ones). This type of evaluation is common to
classification functions that do not have the argument \code{nbs_of}. Only
absolute conditions can have a global evaluation. See function
\code{\link{cond.4.all}}.
\item \strong{Focal evaluation} \cr Classification rules are applied only to raster
cells contiguous to focal cells. This type of evaluation is common to
classification functions that have the argument \code{nbs_of}. The argument
\code{nbs_of} identifies the class(es) of the focal cells. See functions
\code{\link{anchor.seed}}, \code{\link{cond.4.nofn}} and
\code{\link{cond.reclass}}.
\itemize{
\item Focal evaluation can take into account both absolute and relative rules;
\item Some classification functions do not have a \code{condition} argument.
Classifications performed by these functions are based on focal evaluations
and only take into account the spatial relationships existing among
different groups of cells. See functions \code{\link{reclass.nbs}} and
\code{\link{classify.all}}.
}
}

\cr \strong{Focal evaluation, definitions}
\itemize{
\item \strong{Cell neighborhood:} a cell with coordinates \code{(x, y)} has 8
neighbors with coordinates: \code{(x±1, y)},  \code{(x, y±1)} and
\code{(x±1, y±1)}. Cells on the edge of a raster have less than 8
neighbors. See \code{\link{ngbList}}.
\item \strong{Focal cell:} cell identified by one of the classes of the argument
\code{nbs_of}.
\item \strong{Test cell:} the cell in the neighborhood of the focal cell that is
being tested. At turns all cells in the neighborhood of a focal cell are
tested against the classification rule.
\item \strong{Directional neighborhood:} it consists of the intersection between the
focal and the test cell neighborhoods.
}

\cr\strong{Absolute conditions}

\strong{1) Absolute test cell condition:} compares cell values against a
threshold value.
\itemize{
\item This type of condition applies to all functions with a \code{conditions}
argument.
\item In global evaluations all cells meeting absolute conditions receive a
classification number. In focal evaluations all \code{test cells} meeting
absolute conditions receive a classification number.
\item \emph{Examples of valid conditions:} \code{"variable_A > 1 & variable_B !=
  0"}; \code{"(variable_A^2 < 50 & variable_B == 0) | abs(variable_C) > 50"}.
\cr \emph{Functions:} \code{\link{anchor.seed}}, \code{\link{cond.4.all}},
\code{\link{cond.4.nofn}} and \code{\link{cond.reclass}}.
}

\cr \strong{2) Absolute neighborhood condition:} compares the values of the
\code{test cell} and of its \code{neighborhood} against a threshold value.
\itemize{
\item This type of condition applies to the functions \code{cond.4.nofn} and
\code{cond.reclass}.
\item An absolute neighborhood condition is identified by a variable name
followed by curly brackets (e.g., \code{"variable_name{}"}).
\item A maximum of 9 evaluations are performed for each test cell (the test
cell itself and the cells of its neighborhood are compared against a
threshold value).
\item Test cells receive a classification number if the rule is true for at
least as many evaluations as the ones specified by the argument
\code{fn_perc}. The argument \code{fn_perc} ranges from 0 to 1. When 9
evaluations are performed, \code{fn_perc = 1} means that all \code{9}
evaluations have to be true; \code{fn_perc = 0.5} means that at least
\code{4.5} (rounded to \code{5}) evaluations have to be true.
\item Only one neighborhood rule is allowed for each condition string (e.g., it
is not possible to have a condition string like \code{"variable_A{} > 0 &
  variable_B{} > 1"}).
\item The function \code{\link{cond.4.nofn}} can consider a \code{directional
  neighborhood} instead of the test cell neighborhood by setting the argument
\code{directional = TRUE}.
\item \emph{Example of valid conditions:} \code{"variable_A{} > 1 & abs(variable_B)
  != 0"}. \cr \emph{Functions:} \code{\link{cond.4.nofn}} and
\code{\link{cond.reclass}}.
}

\cr \strong{Relative conditions}

\strong{1) Relative focal cell condition:} compares the \code{test cell} value
against the \code{focal cell} value.
\itemize{
\item This type of condition applies only to functions performing focal
evaluation (i.e. function with a \code{nbs_of} argument).
\item It is identified by a variable name followed by square brackets (e.g.,
\code{"variable_name[]"}).
\item Rules are defined repeating twice the same variable name, once with
square brackets and once without. Square brackets indicate the focal cell
value. As an example, the rule \code{"dummy_var < dummy_var[]"} compares
the value of the the test cell (\code{"dummy_var"}) against the value of
the focal cell (\code{"dummy_var[]"}).
\item Test cells are classified if the rule is true.
\item \emph{Examples of valid conditions:} \code{"variable_A > variable_A[]"};
\code{"(variable_A > variable_A[] & variable_B{} < 10) | variable_C > 1"}.
Note that the last example is a combination of absolute and focal cell
conditions. \cr \emph{Functions:} \code{\link{anchor.seed}} and
\code{\link{cond.4.nofn}}.
}

\strong{2) Relative neighborhood rule:} compares the values of the \code{test
  cell} against the values of the \code{test cell neighborhood}.
\itemize{
\item This type of condition applies only to the functions
\code{\link{cond.4.nofn}} and \code{\link{cond.reclass}}.
\item It is identified by a variable name followed by curly brackets (e.g.,
\code{"variable_name{}"}).
\item Rules are defined repeating twice the same variable name, once with curly
brackets and once without. Curly brackets indicate the test cell
neighborhood. As an example, the rule \code{'dummy_var < dummy_var{}'}
compares the value of the the test cell (\code{dummy_var}) against the
values of cells included in the test cell neighborhood
(\code{dummy_var{}}).
\item A maximum of 8 evaluations are performed for each test cell (the test
cell is compared against each cell included in its neighborhood).
\item Test cells receive a classification number if the rule is true for at
least as many evaluations as the ones specified by the argument
\code{fn_perc}. The argument \code{fn_perc} ranges from 0 to 1. When 8
evaluations are performed, \code{fn_perc = 1} means that all \code{8}
evaluations have to be true; \code{fn_perc = 0.5} means that at least
\code{5} evaluations have to be true.
\item Only one neighborhood rule is allowed for each condition string (e.g., it
is not possible to have a condition string like \code{"variable_A{} > 0 &
  variable_B{} > variable_B"}).
\item The function \code{\link{cond.4.nofn}} can consider a \code{directional
  neighborhood} instead of the test cell neighborhood by setting the argument
\code{directional = TRUE}.
\item \emph{Example of valid conditions:} \code{"variable_A > variable_A{}"};
\code{"(variable_A > variable_A{} & variable_B != variable_B[]) |
  variable_C > 1"}. Note that the last example is a combination of absolute
and relative conditions. \cr \emph{Functions:} \code{\link{cond.4.nofn}} and
\code{\link{cond.reclass}}.
}
}
\examples{
# LOAD LIBRARIES
library(scapesClassification)
library(terra)

################################################################################
# TYPES OF CONDITIONS
################################################################################

# As an example consider an attribute with the following columns
names_attTbl <- c("bathymetry", "slope")

# And the following conditions
cond <- "bathymetry>10"
conditions(names_attTbl, cond)

cond <- "bathymetry[]>bathymetry | abs(slope{}) < 5"
conditions(names_attTbl, cond)

cond <- "bathymetry[]>bathymetry | abs(slope{}) < slope"
conditions(names_attTbl, cond)

\dontrun{
# The function conditions detect syntax and spelling errors

cond <- "bathymetry[]>10 & | abs(slope{}) < 5"
conditions(names_attTbl, cond)

cond <- "baxxxthymetryxxx[]>10 &  abs(slope{}) < 5"
conditions(names_attTbl, cond)

# 'seedVector' and 'classVector' are not valid names
names_attTbl <- c(names_attTbl, "classVector", "seedVector")
cond <- TRUE
conditions1(names_attTbl, cond)
}

################################################################################
# FOCAL EVALUATION DEFINITIONS
################################################################################

# CELL NUMBERS OF A DUMMY RASTER (7X7)
r   <- terra::rast(matrix(1:49, nrow = 7, byrow = TRUE))
nbs <- ngbList(r)

# CLASS VECTOR WITH ONE TEST AND ONE FOCAL CELL
cv <- as.numeric(rep(NA, 49))
cv[c(32, 25)] <- c(1, 2) # tc (class 1), fc (class 2)
r_cv <- cv.2.rast(r, classVector = cv)

# POLYGONS REPRESENTING NEIGHBORHOODS
tcn <- rbind(c(1/7*2, 1/7*5), c(1/7*5, 1/7*5), c(1/7*5, 1/7*2), c(1/7*2, 1/7*2), c(1/7*2, 1/7*5))
tcn <- terra::vect(tcn, type="polygons")

fcn <- rbind(c(1/7*2, 1/7*4), c(1/7*5, 1/7*4), c(1/7*5, 1/7*1), c(1/7*2, 1/7*1), c(1/7*2, 1/7*4))
fcn <- terra::vect(fcn, type="polygons")

# PLOT - FOCAL EVALUATION DEFINITIONS
m <- c(3.5, 8, 1.2, 8)
plot(r_cv, type = "class", asp = NA, legend = FALSE, axes = FALSE, mar = m,
     col = c("goldenrod3","#1088a0"), colNA= "grey90")
text(r)
mtext(side=3, line=0, adj=0, cex=1, font=2, "FOCAL EVALUATION")
mtext(side=1, line=0, adj=0, cex=0.9,
      "Focal cell neighborhood: 17, 18, 19, 24, 26, 31, 32, 33")
mtext(side=1, line=1, cex=0.9, adj=0,
      "Test cell neighborhood: 24, 25, 26, 31, 33, 38, 39, 40")
mtext(side=1, line=2, cex=0.9, adj=0,
     "Directional neighborhood: 24, 25, 26, 31, 32, 33")
lines(tcn, col="#1088a0", lwd=2)
lines(fcn, col="#cfad8999", lwd=2)
legend("bottomleft", ncol = 1, bg = "white", y.intersp= 1.3,
       legend = c("Focal cell", "Test cell"), fill = c("#1088a0", "goldenrod3"))
}
\seealso{
\code{\link[=anchor.seed]{anchor.seed()}}, \code{\link[=attTbl]{attTbl()}}, \code{\link[=cond.4.all]{cond.4.all()}}, \code{\link[=cond.4.nofn]{cond.4.nofn()}},
\code{\link[=cond.reclass]{cond.reclass()}}, \code{\link[=classify.all]{classify.all()}}
}
