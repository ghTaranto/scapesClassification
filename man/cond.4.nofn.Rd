% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cond_4_nofn.R
\name{cond.4.nofn}
\alias{cond.4.nofn}
\title{Test conditions for neighbors and neighbors of neighbors}
\usage{
cond.4.nofn(
  attTbl,
  ngbList,
  rNumb = FALSE,
  classVector,
  nbs_of,
  conditions,
  class,
  min.border = NULL,
  overwrite_class = FALSE,
  max.iter = +Inf,
  fn_perc = 1,
  directional = FALSE
)
}
\arguments{
\item{attTbl}{data.frame, the attribute table returned by the function
\code{\link{attTbl}}.}

\item{ngbList}{list, the list of neighborhoods returned by the function
\code{\link{ngbList}}.}

\item{rNumb}{logic, the neighborhoods of the argument \code{ngbList} are
identified by cell numbers (\code{rNumb=FALSE}) or by row numbers
(\code{rNumb=TRUE}) (see \code{\link{ngbList}}). It is advised to use row
numbers for large rasters.}

\item{classVector}{numeric vector, defines the cells in the attribute table
that have already been classified.}

\item{nbs_of}{numeric or numeric vector, indicates the class(es) of focal and
anchor cells. Conditions are only evaluated at positions adjacent to anchor
and focal cells. If the classification number assigned with the argument
\code{class} is also included in the argument \code{nbs_of}, the function
takes into account \emph{class continuity} (see \code{\link{conditions}}).}

\item{conditions}{character string, the conditions a cell have to meet to be
classified as indicated by the argument \code{class}. The classification
number is only assigned to \code{classVector} NA-cells unless the argument
\code{overwrite_class = TRUE}.}

\item{class}{numeric, the classification number to assign to all cells that
meet the function conditions.}

\item{min.border}{numeric value between 0 and 1. A test cell is classified if
conditions are true and if at least as many neighbors as the percentage
specified by \code{min.border} belong to one of the classes of
\code{nbs_of}. Percentages are computed counting only valid neighbors
(i.e., neighbors with complete cases).}

\item{overwrite_class}{logic, reclassify cells that were already classified
and that meet the function conditions.}

\item{max.iter}{integer, the maximum number of iterations.}

\item{fn_perc}{numeric value between 0 and 1. If \emph{absolute or relative
neighborhood conditions} are considered, test cells are classified if the
conditions are true for at least as many evaluations as the ones specified
by the argument \code{fn_perc} (see \code{\link{conditions}}).}

\item{directional}{logic, absolute or relative neighborhood conditions are
tested using the \emph{directional neighborhood} (see \code{\link{conditions}}).}
}
\value{
Update \code{classVector} with the new cells that were classified by
the function.
}
\description{
Evaluate conditions for cells neighboring specific classes and classify them
if conditions are true.
}
\details{
\itemize{ \item The function evaluates the conditions of the
argument \code{conditions} for all unclassified cells (i.e.,
\code{classVector} NA-cells) included in the neighborhood of focal and
anchor cells (specified by the argument \code{nbs_of}).

\item Cells that meet the function conditions are classified as indicted by
the argument \code{class}.

\item \emph{Class continuity} is considered if the classification number
assigned with the argument \code{class} is also included in the argument
\code{nbs_of} (see \code{\link{conditions}}).

\item All types of conditions can be used. The condition string can only
include one neighborhood condition (\code{'{}'}) (see
\code{\link{conditions}}).}
}
\examples{
# NOT RUN
\dontrun{
# LOAD LIBRARIES
library(raster)
library(scapesClassification)

# LOAD THE DUMMY RASTER
r <- list.files(system.file("extdata", package = "scapesClassification"),
                pattern = "dummy_raster\\\\.tif", full.names = T)
r <- raster(r)

# COMPUTE THE ATTRIBUTE TABLE
at <- attTbl(r, "dummy_var")

# COMPUTE THE LIST OF NEIGBORHOODS
nbs <- ngbList(r)

# SET A DUMMY FOCAL CELL (CELL #25)
at$cv[at$Cell == 25] <- 0

# ABSOLUTE TEST CELL CONDITION - NO CLASS CONTINUITY
################################################################################
# conditions: "dummy_var >= 3"

cv1 <- cond.4.nofn(attTbl = at, ngbList = nbs,

                   # CLASS VECTOR - INPUT
                   classVector = at$cv,

                   # FOCAL CELL CLASS
                   nbs_of = 0,

                   # CLASSIFICATION NUMBER
                   class = 1,

                   # ABSOLUTE TEST CELL CONDITION
                   conditions = "dummy_var >= 3")

# CONVERT THE CLASS VECTOR INTO A RASTER
r_cv1 <- cv.2.rast(r, at$Cell,classVector = cv1, plot = FALSE)

# PLOT
plot(r_cv1, axes=FALSE, box=FALSE, legend = FALSE, colNA="#818792",
     col=c("#78b2c4", "#cfad89"),
     main = "dummy_var >= 3\n(no class continuity)")
legend("right", legend = c("Focal cell", "Classified cells", "Unclassified cells"),
       fill = c("#78b2c4", "#cfad89", "#818792"), inset = 0.1)
text(r)
################################################################################

# ABSOLUTE TEST CELL CONDITION - WITH CLASS CONTINUITY
################################################################################
# conditions: "dummy_var >= 3"

cv2 <- cond.4.nofn(attTbl = at, ngbList = nbs, classVector = at$cv,

                   nbs_of = c(0,  # FOCAL CELL CLASS
                              1), # CLASSIFICATION NUMBER

                  # CLASSIFICATION NUMBER
                   class = 1,     # CLASSIFICATION NUMBER

                   # ABSOLUTE CONDITION
                   conditions = "dummy_var >= 3")

# CONVERT THE CLASS VECTOR INTO A RASTER
r_cv2 <- cv.2.rast(r, at$Cell,classVector = cv2, plot = FALSE)

# PLOT
plot(r_cv2, axes=FALSE, box=FALSE, legend = FALSE, colNA="#818792",
     col=c("#78b2c4", "#cfad89"),
     main = "dummy_var >= 3\n(with class continuity)")
legend("right", legend = c("Focal cell", "Classified cells", "Unclassified cells"),
       fill = c("#78b2c4", "#cfad89", "#818792"), inset = 0.1)
text(r)
################################################################################

# ABSOLUTE NEIGHBORHOOD CONDITION
################################################################################
# conditions: "dummy_var{} >= 3"

cv3 <- cond.4.nofn(attTbl = at, ngbList = nbs, classVector = at$cv,
                   nbs_of = c(0,1), class = 1,

                   # ABSOLUTE NEIGHBORHOOD CONDITION
                   conditions = "dummy_var{} >= 3",

                   # RULE HAS TO BE TRUE FOR 100\% OF THE EVALUATIONS
                   fn_perc = 1)

# CONVERT THE CLASS VECTOR INTO A RASTER
r_cv3 <- cv.2.rast(r, at$Cell,classVector = cv3, plot = FALSE)

#PLOT
plot(r_cv3, axes=FALSE, box=FALSE, legend = FALSE, colNA="#818792",
     col=c("#78b2c4", "#cfad89"),
     main = "dummy_var{ } >= 3\n{ } = neighborhood")
legend("right", legend = c("Focal cell", "Classified cells", "Unclassified cells"),
       fill = c("#78b2c4", "#cfad89", "#818792"), inset = 0.1)
text(r)
################################################################################

# RELATIVE NEIGHBORHOOD CONDITION
################################################################################
# conditions: "dummy_var > dummy_var{}"

cv4 <- cond.4.nofn(attTbl = at, ngbList = nbs, classVector = at$cv,
                   nbs_of = c(0,1), class = 1,

                   # RELATIVE NEIGHBORHOOD CONDITION
                   conditions = "dummy_var > dummy_var{}",

                   # RULE HAS TO BE TRUE FOR AT LEAST 60\% OF THE EVALUATIONS
                   fn_perc = 0.6)


# CONVERT THE CLASS VECTOR INTO A RASTER
r_cv4 <- cv.2.rast(r, at$Cell, classVector = cv4, plot = FALSE)

#PLOT
plot(r_cv4, axes=FALSE, box=FALSE, legend = FALSE, colNA="#818792",
     col=c("#78b2c4", "#cfad89"),
     main = "dummy_var > dummy_var{ }\n{ } = neighborhood condition")
legend("right", legend = c("Focal cell", "Classified cells", "Unclassified cells"),
       fill = c("#78b2c4", "#cfad89", "#818792"), inset = 0.1)
text(r)
################################################################################

# RELATIVE FOCAL CELL CONDITION
################################################################################
# conditions: "dummy_var > dummy_var[]"

cv5 <- cond.4.nofn(attTbl = at, ngbList = nbs, classVector = at$cv,
                   nbs_of = c(0,1), class = 1,

                   # RELATIVE FOCAL CELL CONDITION
                   conditions = "dummy_var > dummy_var[]")


# CONVERT THE CLASS VECTOR INTO A RASTER
r_cv5 <- cv.2.rast(r, at$Cell,classVector = cv5, plot = FALSE)

#PLOT
plot(r_cv5, axes=FALSE, box=FALSE, legend = FALSE, colNA="#818792",
     col=c("#78b2c4", "#cfad89"),
     main = "dummy_var > dummy_var[ ]\n[ ] = focal cell")
legend("right", legend = c("Focal cell", "Classified cells", "Unclassified cells"),
       fill = c("#78b2c4", "#cfad89", "#818792"), inset = 0.1)
text(r)
}
}
\seealso{
\code{\link[=conditions]{conditions()}}, \code{\link[=attTbl]{attTbl()}}, \code{\link[=ngbList]{ngbList()}}
}
