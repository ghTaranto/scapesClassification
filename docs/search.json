[{"path":[]},{"path":[]},{"path":[]},{"path":"https://ghtaranto.github.io/scapesClassification/articles/scapesClassification_02_1_DATA.html","id":"study-case-and-input-data","dir":"Articles","previous_headings":"","what":"Study case and input data","title":"Format input data","text":"study area located ‘Triangle’ Azores (NE Atlantic), around islands Faial, Pico São Jorge (Figure 1). Geomorphic management units (GMUs) identified using RasterStack six layers includes bathymetry, bathymetric derivatives (Walbridge et al., 2018) geomorphons area (Jasiewicz Stepinski, 2013): Bathymetry: depth values; Local BPI: bathymetric position index (BPI) computed outer radius 10px (ca. 5 km); Regional BPI: bathymetric position index (BPI) computed outer radius 40px (ca. 20 km); Slope: slope values; SD bathymetry: standard deviation bathymetric values computed 9x9 window; Geomorphons: identify basic morphological terrain types. start loading required libraries data workspace: can plot raster stack interactive map using R packages mapview leaflet:","code":"# LOAD LIBRARIES library(raster) library(scapesClassification)  # LOAD DATA grd <- list.files(system.file(\"extdata\", package = \"scapesClassification\"), full.names = T) grd <- grd[grepl(\"\\\\.grd\", grd)] grd <- grd[!grepl(\"hillshade\", grd)] rstack <- stack(grd)"},{"path":"https://ghtaranto.github.io/scapesClassification/articles/scapesClassification_02_1_DATA.html","id":"format-input-data","dir":"Articles","previous_headings":"","what":"Format input data","title":"Format input data","text":"classification process scapesClassification begins computation two objects: Attribute table: raster object converted data.frame. Attribute tables include raster cells missing values. Function attTbl(). Neighborhood list: list neighbors every raster cell included attribute table. Function ngbList().","code":"# COMPUTE ATTRIBUTE TABLE atbl <- attTbl(rstack, var_names = c(\"bathymetry\", \"gmorph\", \"local_bpi\", \"regional_bpi\", \"sd_bat\", \"slope\"))  # VIEW THE TOP 3 ROWS OF `atbl` # Each row corresponds to the raster cell indicated in atbl$Cell  head(atbl, 3)  ##   Cell bathymetry gmorph local_bpi regional_bpi   sd_bat    slope ## 1    1  -1718.056      8        -4          129 55.40389 1.410384 ## 2    2  -1737.816      8        -3          107 49.10466 2.021313 ## 3    3  -1755.392      6        -1           87 42.76672 2.482018 # COMPUTE NEIGHBORHOOD LIST nbs <- ngbList(rstack, rNumb = TRUE, attTbl = atbl) # neighbors are identified by their row number in the attribute table  # VIEW THE TOP ELEMENT OF `nbs` nbs[1] ## $`1` ## [1]   2 291 292  # nbs[1] reads as: # the cell in row $`1` of `atbl` has  # cells of rows 2, 291 and 292 as neighbors"},{"path":"https://ghtaranto.github.io/scapesClassification/articles/scapesClassification_02_2_ISU.html","id":"load-data-and-libraries","dir":"Articles","previous_headings":"","what":"1 Load data and libraries","title":"Island shelf unit (ISU)","text":"start loading required libraries data workspace. steps explained previous article:","code":"# LOAD LIBRARIES library(raster) library(scapesClassification)  # LOAD DATA grd <- list.files(system.file(\"extdata\", package = \"scapesClassification\"), full.names = T) grd <- grd[grepl(\"\\\\.grd\", grd)] grd <- grd[!grepl(\"hillshade\", grd)] rstack <- stack(grd)  # COMPUTE ATTRIBUTE TABLE atbl <- attTbl(rstack, var_names = c(\"bathymetry\", \"gmorph\", \"local_bpi\", \"regional_bpi\", \"sd_bat\", \"slope\"))  # COMPUTE NEIGHBORHOOD LIST nbs <- ngbList(rstack, rNumb = TRUE, attTbl = atbl) # neighbors are identified by their row number in the attribute table"},{"path":"https://ghtaranto.github.io/scapesClassification/articles/scapesClassification_02_2_ISU.html","id":"island-shelf-units-isu","dir":"Articles","previous_headings":"","what":"2 Island shelf units (ISU)","title":"Island shelf unit (ISU)","text":"can start GMUs classification island shelf unit (ISU). ISU comprises two main elements: () island shelves (.e., relatively flat areas surrounding islands) (ii) slopes (.e., areas connect island shelves seafloor).","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/articles/scapesClassification_02_2_ISU.html","id":"isu---anchor-cells","dir":"Articles","previous_headings":"2 Island shelf units (ISU)","what":"2.1 ISU - Anchor cells","title":"Island shelf unit (ISU)","text":"Anchor cells raster cells can easily assigned class distinctive attribute(s). example, cells ‘adjacent island’ definition ‘island shelf cells’. can derive initial set ‘ISU-anchor cells’ using functions: anchor.svo(): returns vector cell numbers extracted locations spatial vector object. example, ‘land cells’ defined : () raster cells extracted island locations complete cases (arg. ONLY_NA = T); (ii) cells adjacent cells point () complete cases either (arg. fill_NAs = T) (Figure 2). anchor.cell(): converts vector cell numbers class vector. example, cells adjacent ‘land cells’ (arg. class2cell = F class2nbs = T) considered ‘ISU-anchor cells’ (Figure 2).  Class vectors map raster cells numeric classes (NA-values class attributed). nth element class vector corresponds raster cell contained nth row attribute table. Class vectors can converted raster, plotted saved using function cv.2.rast(). However, present classification outputs interactive maps.","code":"# ISLAND SHAPEFILE PATH shp <- system.file(\"extdata\", \"Azores.shp\", package = \"scapesClassification\")  # EXTRACT LAND POSITIONS anchorLAND <- anchor.svo(rstack              = rstack,                           spatial_vector_name = shp,                           only_NAs            = TRUE,                           fill_NAs            = TRUE,                           plot                = FALSE) # COMPUTE ANCHOR CELLS anchorCELL <- anchor.cell(attTbl     = atbl,                            rstack     = rstack,                            anchor     = anchorLAND,                            class      = 1, # ANCHOR CELL CLASS = 1                           class2cell = FALSE,                           class2nbs  = TRUE,                           plot       = FALSE) # CLASS VECTOR unique(anchorCELL)  ## [1] NA  1  # anchorCELL == 1,  ISU anchor cells # anchorCELL == NA, unclassified cells  length(anchorCELL) == NROW(atbl) ## [1] TRUE"},{"path":"https://ghtaranto.github.io/scapesClassification/articles/scapesClassification_02_2_ISU.html","id":"isu---island-shelf-cells","dir":"Articles","previous_headings":"2 Island shelf units (ISU)","what":"2.2 ISU - Island shelf cells","title":"Island shelf unit (ISU)","text":"previous section identified portion ‘island shelves’ adjacent island. Another useful property ‘island shelves’ tend flat. property shared several classes (e.g., flat tops abyssal plains), can still define ‘island shelves’ considered context class contiguity continuity. use following set rules identify ‘island shelf cells’: assume cell flat slope < 5º; Flat cells adjacent ‘island shelf cells’ classified ‘island shelf’ (class contiguity); long new ‘island shelf cells’ identified, rule b can evaluated new adjacent cells (class continuity); set rules can evaluated using function: cond.4.nofn(): Evaluate conditions cells neighboring specific classes. case, function identifies ‘flat cells’ island shelves based set rules (Figure 3). ‘flat cells’ identified, assume raster cells surrounded ‘island shelf cells’ also ‘island shelf cells’. define cell surrounded 60% neighbors belong ‘island shelf’ class (‘hole cell’, Figure 3). Class vectors updated time passed classification function. Cells classified meet conditions get classification number. class vector holeCELLS latest computed resulted updates anchorCELL flatCELLS. Therefore, includes island shelf cells (Figure 3).","code":"# ISU SHELF CELLS (FLAT CELLS) flatCELLS <- cond.4.nofn(atbl, nbs, nbsIndex = T,                                                    # `anchorCELL` class vector                          classVector = anchorCELL,                                                      # flat cell class                           class = 2,                                                    # evaluate cells adjacent to anchor cells (class=1) or flat cells (class=2)                          nbs_of = c(1, 2),                                                     # condition string (slope refers to the column `slope` of `atbl`)                          conditions = \"slope <= 5\",                                                     # a cell is classified if conditions are true AND if at least 20% of its neighboring cells belong to one of the classes of the argument `nbs_of`                          min.border = 0.2) # ISU SHELF CELLS (FILL CLASSIFICATION HOLES) holeCELLS <- cond.4.nofn(atbl, nbs, nbsIndex = T,                                                    # `flatCELLS` class vector                          classVector = flatCELLS,                                                     # hole cell class                          class = 3,                                                        # evaluate cells adjacent to anchor cells (class=1), flat cells (class=2) or hole cells                          nbs_of = c(1, 2, 3),                                                    # conditions are always true                          conditions = \"TRUE\",                                                    # a cell is classified if at least 60% of its neighboring cells belong to one of the classes of the argument `nbs_of`                          min.border = 0.6) # ISLAND SHELF CELLS  unique(holeCELLS) ## [1] NA  2  3  1  # holeCELLS == 1,  ISU anchor cells # holeCELLS == 2,  ISU flat cells # holeCELLS == 3,  ISU hole cells # holeCELLS == NA, Other cells"},{"path":"https://ghtaranto.github.io/scapesClassification/articles/scapesClassification_02_2_ISU.html","id":"isu---slope-cells","dir":"Articles","previous_headings":"2 Island shelf units (ISU)","what":"2.3 ISU - Slope cells","title":"Island shelf unit (ISU)","text":"can identify ‘slope cells’ using function cond.4.nofn() evaluate three sets conditions. sets conditions take account class contiguity continuity. Slope1 cell. first set conditions consider regions adjacent island shelves, ‘slope cells’ tend positive BPI values (regional_bpi > 100) (‘Slope1 cell’, Figure 4). Slope2 cell. second set conditions consider small ridges connected ISU also part ISU. Small ridges tend high local BPI values (local_bpi{} > 100). Note use tag {} variable local_bpi argument fn_perc = 0.4. tag {} flags absolute focal neighborhood conditions, fn_perc = 0.4 states focal cell classified conditions true least 40% cells included focal neighborhood (‘Slope2 cells’, Figure 4). Slope3 cell. third set conditions consider even cells negative BPI values can part ‘ISU slopes’. can assume long high bathymetric variation around raster cell connected slope seafloor reached. set condition using {} tag (sd_bat{} > 150), change fn_perc = 1 (‘Slope3 cell’, Figure 4). can plot result ‘ISU slope’ classification:","code":"slope1 <- cond.4.nofn(atbl, nbs, nbsIndex = T,                                              # `holeCELLS` class vector                       classVector = holeCELLS,                                              # slope1 cell class                       class = 4,                                              # evaluate cells adjacent to ISU cells                       nbs_of = c(1,2,3,4),                                               # condition string (regional_bpi refers to the column `regional_bpi` of `atbl`)                       conditions = \"regional_bpi > 100\",                                              # a cell is classified if conditions are true AND if at least 20% of its neighboring cells belongs to one of the classes of the argument `nbs_of`                       min.border = 0.2) slope2 <- cond.4.nofn(atbl, nbs, nbsIndex = T,                                              # `slope1` class vector                       classVector = slope1,                                               # slope2 cell class                       class = 5,                                              # evaluate cells adjacent to ISU cells                       nbs_of = c(1,2,3,4,5),                                               # condition string (local_bpi refers to the column `local_bpi` of `atbl`, `{}` flags an absolute focal neighborhood condition)                       conditions = \"local_bpi{} > 100\",                                               # a cell is classified if conditions are true for at least 40% of the cells in the focal cell neighborhood                       fn_perc = 0.4,                                              # a cell is classified if conditions are true AND if at least 20% of its neighboring cells belong to one of the classes of the argument `nbs_of`                       min.border = 0.2) slope3 <- cond.4.nofn(atbl, nbs, nbsIndex = T,                                              # `slope2` class vector                       classVector = slope2,                                               # slope3 cell class                       class = 6,                                              # evaluate cells adjacent to ISU cells                       nbs_of = c(1,2,3,4,5,6),                                               # condition string (sd_bat refers to the column `sd_bat` of `atbl`, `{}` flags an absolute focal neighborhood condition)                       conditions = \"sd_bat{} > 150\",                                               # a cell is classified if conditions are true for 100% of the cells in the focal cell neighborhood                       fn_perc = 1,                                              # a cell is classified if conditions are true AND if at least 20% of its neighboring cells belong to one of the classes of the argument `nbs_of`                       min.border = 0.2)"},{"path":"https://ghtaranto.github.io/scapesClassification/articles/scapesClassification_02_2_ISU.html","id":"isu---class-vector","dir":"Articles","previous_headings":"2 Island shelf units (ISU)","what":"2.4 ISU - Class vector","title":"Island shelf unit (ISU)","text":"class vector slope3 includes ISU-cells (Figure 4). can saved *.RDS file used following classification steps.","code":"# ISU CELLS unique(slope3) ## [1] NA  6  5  4  2  3  1  # slope3 == 1,  ISU anchor cells # slope3 == 2,  ISU flat cells # slope3 == 3,  ISU hole cells  # slope3 == 4,  ISU slope1 cells # slope3 == 5,  ISU slope2 cells # slope3 == 6,  ISU slope3 cells  # slope3 == NA, Non-ISU cells  # SAVE `slope3` # saveRDS(slope3, \"ISU_Cells.RDS\")"},{"path":"https://ghtaranto.github.io/scapesClassification/articles/scapesClassification_02_3_PKS.html","id":"load-data-and-libraries","dir":"Articles","previous_headings":"","what":"1 Load data and libraries","title":"Local maxima on gridded data","text":"start loading required libraries data workspace. steps explained previous articles: format input data island shelf unit (ISU):","code":"# LOAD LIBRARIES library(raster) library(scapesClassification)  # LOAD DATA grd <- list.files(system.file(\"extdata\", package = \"scapesClassification\"), full.names = T) grd <- grd[grepl(\"\\\\.grd\", grd)] grd <- grd[!grepl(\"hillshade\", grd)] rstack <- stack(grd)  # COMPUTE ATTRIBUTE TABLE atbl <- attTbl(rstack, var_names = c(\"bathymetry\", \"gmorph\", \"local_bpi\", \"regional_bpi\", \"sd_bat\", \"slope\"))  # COMPUTE NEIGHBORHOOD LIST nbs <- ngbList(rstack, rNumb = TRUE, attTbl = atbl) # neighbors are identified by their row number in the attribute table  # LOAD ISU CLASSIFICATION ISU <- list.files(system.file(\"extdata\", package = \"scapesClassification\"), full.names = T,                    pattern = \"ISU_Cells\\\\.RDS\")  ISU <- readRDS(ISU)"},{"path":"https://ghtaranto.github.io/scapesClassification/articles/scapesClassification_02_3_PKS.html","id":"isu-class-vector","dir":"Articles","previous_headings":"1 Load data and libraries","what":"ISU class vector","title":"Local maxima on gridded data","text":"Class vectors can added attribute table used filters. add ISU class vector attribute table use exclude ISU cells relief unit (.e., raster cell ISU RU cell).","code":"# ISU FILTER atbl$ISU <- ISU"},{"path":"https://ghtaranto.github.io/scapesClassification/articles/scapesClassification_02_3_PKS.html","id":"relief-unit-ru","dir":"Articles","previous_headings":"","what":"2 Relief Unit (RU)","title":"Local maxima on gridded data","text":"previous article identified first geomorphic management unit (GMU) (island shelf unit (ISU)). can now continue second GMU, relief unit (RU). RU comprises features rise seafloor seamounts ridges. article identify local peaks. Local peak used next article classify prominent seamounts, banks ridges individual raster objects (independent objects raster surfaces).","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/articles/scapesClassification_02_3_PKS.html","id":"peak-search-areas-psas","dir":"Articles","previous_headings":"","what":"2.1 Peak search areas (PSAs)","title":"Local maxima on gridded data","text":"strategy use find local peaks identify discrete areas local peaks likely located. shallowest cell within discrete area classified peak. peak search area (PSAs) can considered filter highlighting areas (Figure 1). can use function cond.4.() identify cells included PSA. PSA cells following characteristics: non-ISU cells local_bpi > 100 geomorphon class “summits” “ridges”","code":"# PSA CLASS VECTOR atbl$PSA <- cond.4.all(atbl,                         conditions = \"is.na(ISU) &                                       local_bpi > 100 &                                      (gmorph == 2 | gmorph == 3)\", # geomorphon classes 2 (summits) OR 3 (ridges)                        class = 1)"},{"path":"https://ghtaranto.github.io/scapesClassification/articles/scapesClassification_02_3_PKS.html","id":"remove-small-psas","dir":"Articles","previous_headings":"2.1 Peak search areas (PSAs)","what":"Remove small PSAs","title":"Local maxima on gridded data","text":"focus set large prominent features, thus, exclude small peak search areas (.e., search areas associated small elevations) (Figure 1). can achieved treating discrete peak search areas individual objects, characterized unique ID certain number raster cells. function anchor.seed() can assign unique IDs non-contiguous areas. Details function works available function documentation (?anchor.seed) implementation section. R package data.table provides easy syntax manipulating tabular data. use manipulate raster objects stored attribute table. case, can define PSA-objects less 5 cells small. classification vectors atbl$PSA, atbl$PSA5 atbl$ISU converted raster layers using function cv.2.rast() (e.g., PSA raster: PSA <- cv.2.rast(rstack, atbl$Cell, atbl$PSA)) plotted Figure 1.","code":"# PSA OBJECTS atbl$PSA_obj <- anchor.seed(      attTbl = atbl, ngbList = nbs, nbsIndex = TRUE,  silent = TRUE,                                # `class = NULL` -> A NEW ID IS GENERATED AT EACH ITERATION   class = NULL,                                # WITHIN PEAK SEARCH AREAS   cond.filter = \"PSA == 1\",       # ITERATION START:   # ASSIGN AN ID TO A PSA CELL   cond.seed = \"PSA == 1\",                                # ASSIGN THE SAME ID TO ALL CONNECTED PSA CELLS   cond.growth = \"PSA == 1\"                                # ITERATION END )  # THERE ARE 88 DISCRETE PSAs  length(unique(atbl$PSA_obj)) ## [1] 88 # CONVERT \"atbl\" INTO A DATA TABLE library(data.table) atbl <- as.data.table(atbl)  # COUNT HOW MANY CELLS HAS EACH \"PSA_obj\" atbl[!is.na(PSA_obj), number_of_cell := .N, by = \"PSA_obj\"]  # IDs WITH LESS THAN 5 CELLS atbl[!duplicated(PSA_obj) & number_of_cell < 5, PSA_obj] ##  [1]  3  4  5  6  7  8 10 11 13 14 16 17 18 19 21 22 23 24 25 26 27 28 29 30 35 ## [26] 38 41 44 46 50 52 53 54 56 58 59 64 67 69 70 71 72 73 79 82 84 85 86 87  # IDs WITH LESS THAN 5 CELLS ARE MOVED TO THE COLUMN PSA5 atbl[number_of_cell <= 5, PSA5 := 1]  # IDs WITH LESS THAN 5 CELLS ARE REMOVED FROM THE COLUMN PSA atbl[number_of_cell <= 5, PSA := NA]"},{"path":"https://ghtaranto.github.io/scapesClassification/articles/scapesClassification_02_3_PKS.html","id":"local-peaks","dir":"Articles","previous_headings":"","what":"2.2 Local peaks","title":"Local maxima on gridded data","text":"use function anchor.seed() find local peaks within discrete peak search areas (PSAs) (Figure 2). Details function works available function documentation (?anchor.seed) implementation section. use identify local peaks. anchor.seed() implements iterative algorithm : Identify search areas. Peak search areas stored atbl$PSA passed function : cond.filter = \"PSA == 1\"; Identify peak cell. peak correspond shallowest raster cell within individual PSA (cond.seed = \"bathymetry == max(bathymetry)\"); Identify non-peak cells. Non-peak cells cells contiguous continuous peak deeper (cond.isol = \"bathymetry < bathymetry[]\"). cells area assigned isolation buffer. Note tag [] refers focal cell condition; peak isolation buffer identified one iteration ignored successive iterations. function stops cells meeting conditions point () either classified peak isolation buffer. class vector atbl$PKS converted raster layers using function cv.2.rast() plotted Figure 2.","code":"# LOCAL PEAKS atbl$PKS <- anchor.seed(      attTbl = atbl, ngbList = nbs, nbsIndex = TRUE,  silent = TRUE,   class = 1,                            # DEFINE PEAK SEARCH AREAS (PSAs)   cond.filter = \"PSA == 1\",                            # IDENTIFY A PEAK CELL IN EACH PSA   cond.seed = \"bathymetry == max(bathymetry)\",                            # ISOLATION BUFFER ('cells contiguous    #                    and continuous to    #                    a peak'           < 'bathymetry of peak cell[]')   cond.isol =          \"bathymetry       <  bathymetry[]\",      # FOCAL CELL LAG IS INFINITE THEREFORE THE TAG '[]' REFERS TO THE SEED CELL ('PEAK CELL[]')   lag.isol = Inf,       # ISOLATION BUFFER IS NOT PROVIDED AS AN OUTPUT   isolationClass = FALSE    )"},{"path":"https://ghtaranto.github.io/scapesClassification/articles/scapesClassification_02_3_PKS.html","id":"peak-class-vector","dir":"Articles","previous_headings":"","what":"2.3 Peak class vector","title":"Local maxima on gridded data","text":"class vector atbl$PKS can saved *.RDS file used following classification steps.","code":"# PEAK CELLS unique(atbl$PKS) ## [1] NA  1  # atbl$PKS == 1,  Peak cells # atbl$PKS == NA, Non-peak cells  # SAVE `atbl$PKS` # saveRDS(atbl$PKS, \"Peak_Cells.RDS\")"},{"path":"https://ghtaranto.github.io/scapesClassification/articles/scapesClassification_02_4_OBJ.html","id":"load-data-and-libraries","dir":"Articles","previous_headings":"","what":"1 Load data and libraries","title":"Independent objects on raster surfaces","text":"start loading required libraries data workspace. steps explained previous articles: format input data, island shelf unit (ISU) local maxima gridded data:","code":"# LOAD LIBRARIES library(raster) library(scapesClassification)  # LOAD DATA grd <- list.files(system.file(\"extdata\", package = \"scapesClassification\"), full.names = T) grd <- grd[grepl(\"\\\\.grd\", grd)] grd <- grd[!grepl(\"hillshade\", grd)] rstack <- stack(grd)  # COMPUTE ATTRIBUTE TABLE atbl <- attTbl(rstack, var_names = c(\"bathymetry\", \"gmorph\", \"local_bpi\", \"regional_bpi\", \"sd_bat\", \"slope\"))  # COMPUTE NEIGHBORHOOD LIST nbs <- ngbList(rstack, rNumb = TRUE, attTbl = atbl) # neighbors are identified by their row number in the attribute table  # LOAD ISU CLASSIFICATION ISU <- list.files(system.file(\"extdata\", package = \"scapesClassification\"), full.names = T,                    pattern = \"ISU_Cells\\\\.RDS\")  ISU <- readRDS(ISU)  # LOAD PEAK CLASSIFICATION PKS <- list.files(system.file(\"extdata\", package = \"scapesClassification\"), full.names = T,                    pattern = \"Peak_Cells\\\\.RDS\")  PKS <- readRDS(PKS)"},{"path":"https://ghtaranto.github.io/scapesClassification/articles/scapesClassification_02_4_OBJ.html","id":"isu-and-peak-class-vectors","dir":"Articles","previous_headings":"1 Load data and libraries","what":"ISU and peak class vectors","title":"Independent objects on raster surfaces","text":"order able take account previous classification steps, add ISU peak class vectors attribute table.","code":"# ISU FILTER atbl$ISU <- ISU  # PEAK FILTER atbl$PKS <- PKS"},{"path":"https://ghtaranto.github.io/scapesClassification/articles/scapesClassification_02_4_OBJ.html","id":"relief-unit-ru","dir":"Articles","previous_headings":"","what":"2 Relief Unit (RU)","title":"Independent objects on raster surfaces","text":"previous article identified set local peaks within study area (local maxima gridded data). article classify prominent seamounts, banks ridges individual raster objects (Figure 2). ## Raster objects different seamounts, banks ridges existing study area identified individual raster objects, characterized unique ID (class). first phase, identify core cells independent RU-objects (Figure 1). second phase, refine borders RU-objects (Figure 2).","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/articles/scapesClassification_02_4_OBJ.html","id":"ru-objects-core-cells","dir":"Articles","previous_headings":"","what":"2.1 RU-objects: core cells","title":"Independent objects on raster surfaces","text":"core prominent RU-object can defined areas contiguous continuous peak high BPI values (local_bpi > 100). can use function cond.4.nofn() evaluate conditions exists around peak cells found previous section (Core_ST1, Figure 1). can now consider among regionally relevant areas (regional_bpi > 100), cores connected flat areas (slope < 3) increasing bathymetric values (bathymetry > bathymetry[]) belong object (Core_ST2, Figure 1). condition bathymetry > bathymetry[] evaluates whether bathymetry cell evaluation greater bathymetry focal cell ([]) . See ?conditions focal cell conditions information.","code":"# RU CORE, STEP 1 atbl$RU_core <- cond.4.nofn(atbl, nbs, nbsIndex = T,                                                       # `atbl$PKS` class vector                              classVector = atbl$PKS,                                                     # core class, step 1                             class       = 1,                                                     # evaluate cells adjacent to peak and other core cells (PEAK CLASS = CORE CLASS = 1)                             nbs_of      = 1,                                                      # condition string                             conditions  = \"local_bpi>100\") # RU CORE,  STEP 2 atbl$RU_core <- cond.4.nofn(atbl, nbs, nbsIndex = T,                                                       # `atbl$PKS` class vector                              classVector = atbl$RU_core,                                                     # core class, step 2                             class       = 2,                                                     # evaluate cells adjacent to peak and other core cells (PEAK CLASS and CORE CLASSES %in% c(1 ,2))                             nbs_of      = c(1,2),                                                      # condition string                             conditions  = \"regional_bpi > 100 & slope < 3 & bathymetry > bathymetry[]\")"},{"path":"https://ghtaranto.github.io/scapesClassification/articles/scapesClassification_02_4_OBJ.html","id":"cores-as-raster-objects","dir":"Articles","previous_headings":"","what":"2.1 Cores as raster objects","title":"Independent objects on raster surfaces","text":"can now consider non-continuous core area independent RU-object. function anchor.seed() can assign unique IDs non-contiguous areas (RU_obj, Figure 1). Details function works available function documentation (?anchor.seed) implementation section.","code":"# RU-OBJECTS atbl$RU_obj <- anchor.seed(      attTbl = atbl, ngbList = nbs, nbsIndex = TRUE,  silent = TRUE,      # `class = NULL` -> A NEW ID IS GENERATED AT EACH ITERATION   class = NULL,      # WITHIN CORE CELLS   cond.filter = \"!is.na(RU_core)\",      # ITERATION START:   # ASSIGN AN ID TO A CORE CELLS   cond.seed   = \"!is.na(RU_core)\",      # ASSIGN THE SAME ID TO ALL CONNECTED CORE CELLS   cond.growth = \"!is.na(RU_core)\",      # IDs ARE ALLOCATED FIRST TO THE SHALLOWEST AVAILABLE CELL WITHIN CORE CELLS; IDs STARTS FROM 1 AND INCREASE SEQUENTIALLY   sort.seed = \"max\", sort.col = \"bathymetry\"      # ITERATION END )"},{"path":"https://ghtaranto.github.io/scapesClassification/articles/scapesClassification_02_4_OBJ.html","id":"remove-small-objects","dir":"Articles","previous_headings":"2.1 Cores as raster objects","what":"Remove small objects","title":"Independent objects on raster surfaces","text":"focus set large prominent features, thus, exclude RU-objects characterized core areas cells low relevance scale study area. can achieved removing objects less 10 cells median regional BPI value < 100 (Rm_IDs, Figure 1). rules can easily written R package data.table. class vectors atbl$RU_core (class = 1 -> Core_ST1; class = 2 -> Core_ST2), atbl$RM_IDs atbl$RU_obj converted raster layers using function cv.2.rast() plotted Figure 1.","code":"# CONVERT \"atbl\" INTO A DATA TABLE library(data.table) atbl <- as.data.table(atbl)  # COMPUTE THE SOME STATISTICS BY RU-OBJECT RU_OBJ_STAT <- atbl[!is.na(RU_obj), .(N_cell=.N,                                        mBPI=median(regional_bpi),                                        minDepth=max(bathymetry),                                        maxDepth=min(bathymetry),                                        avgDepth=mean(bathymetry),                                        area=.N*0.25),                      by = \"RU_obj\"][order(RU_obj)]  # SHOW TABLE RU_OBJ_STAT ##     RU_obj N_cell  mBPI   minDepth   maxDepth   avgDepth   area ##  1:      1    491 498.0  -164.3328  -990.3394  -396.6579 122.75 ##  2:      2    380 692.5  -194.3773 -1619.8312  -683.4881  95.00 ##  3:      3    183 349.0  -215.8348  -545.1240  -348.8780  45.75 ##  4:      4     16 460.5  -235.2476  -325.1996  -278.3918   4.00 ##  5:      5    299 454.0  -361.4703 -1491.8427  -701.9860  74.75 ##  6:      6    217 277.0  -361.5406 -1153.9203  -755.5216  54.25 ##  7:      7    184 298.0  -388.5884 -1010.6237  -625.1634  46.00 ##  8:      8     38 347.0  -392.8648  -561.9896  -476.8773   9.50 ##  9:      9    505 441.0  -407.6159 -1604.9333  -962.8874 126.25 ## 10:     10    321 309.0  -474.0435  -723.2984  -574.5849  80.25 ## 11:     11    170 433.0  -490.2386 -1127.1927  -846.0773  42.50 ## 12:     12    218 475.0  -559.1892 -1279.6696  -769.4475  54.50 ## 13:     13     14 139.5  -607.3957  -860.5279  -765.3349   3.50 ## 14:     14     17  73.0  -613.6424  -678.6453  -627.7039   4.25 ## 15:     15     38 176.0  -625.3524  -845.1296  -749.6262   9.50 ## 16:     16     37 197.0  -739.5604 -1034.6638  -894.7178   9.25 ## 17:     17     15  48.0  -755.9834  -958.8308  -888.2792   3.75 ## 18:     18    218 120.0  -776.0008 -1597.0000 -1026.1293  54.50 ## 19:     19     18 239.5  -790.3533  -897.4000  -843.0433   4.50 ## 20:     20     94 355.5  -877.1409 -1274.7040 -1059.1027  23.50 ## 21:     21      8 125.0  -941.2967 -1020.7404  -966.4781   2.00 ## 22:     22      8 306.0 -1164.5680 -1255.9840 -1201.5060   2.00 ## 23:     23      7 179.0 -1211.4160 -1503.4662 -1328.0968   1.75 ## 24:     24      6  10.0 -1238.5221 -1252.8600 -1242.6201   1.50 ##     RU_obj N_cell  mBPI   minDepth   maxDepth   avgDepth   area  # IDS TO REMOVE IDs <- RU_OBJ_STAT[N_cell <= 10 | mBPI < 100, RU_obj]  # SHOW IDs IDs ## [1] 14 17 21 22 23 24  # MOVE IDs TO REMOVE IN COLUMN `atbl$RM_IDs` atbl[RU_obj %in% IDs, RM_IDs := 1]  # REMOVE IDs FROM RU_obj atbl[RU_obj %in% IDs, RU_obj := NA]"},{"path":"https://ghtaranto.github.io/scapesClassification/articles/scapesClassification_02_4_OBJ.html","id":"ru-objects-refine-borders","dir":"Articles","previous_headings":"","what":"2.2 RU-objects: refine borders","title":"Independent objects on raster surfaces","text":"set rules previous section mostly aimed defining summit areas RU-objects. can now consider second set rules include non-summit areas RU-object (Figure 2). use sets rules used define ISU-slopes. rules can combined single string using operator (|): \"(regional_bpi>100|local_bpi>100|sd_bat>150)\". take account class contiguity continuity using function cond.4.nofn().","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/articles/scapesClassification_02_4_OBJ.html","id":"ru-object-class-vector","dir":"Articles","previous_headings":"2.2 RU-objects: refine borders","what":"RU-object class vector","title":"Independent objects on raster surfaces","text":"class vector atbl$RU_obj present 18 unique values. value correspond RU-object. like apply set conditions RU-object number 5 : like apply set conditions conditions RU-objects use loop: iteration loop, conditions applied RU-object using function cond.4.nofn(). adjacent continuous cells respecting conditions included RU-object, loop moves next iteration. Note implementation allow homogeneous growth different objects. fact, one object stops grow, next object considered. times, useful objects growing homogeneous way. hte next section show can achieved compute new borders RU-objects.","code":"# APPLY CONDITIONS TO OBJECT 5 # cond.4.nofn(atbl, nbs, nbsIndex = T,  #                        #             classVector = atbl$RU_obj,  #                          #             conditions  = \"(regional_bpi>100|local_bpi>100|sd_bat{}>150)\",  #                         #             fn_perc     = 1,  #             min.border  = 0.2, #                         #             # CONDITIONS APPLIED TO NEIGHBORS OF OBJECT 5 #             class       = 5,  #             nbs_of      = 5, #                         # ) # APPLY CONDITIONS TO ALL OBJECTS # RU_IDs <- unique(atbl$RU_obj) # RU_IDs <- sort(RU_IDs[!is.na(RU_IDs)]) #  # # Non-homogeneous growth # for(i in RU_IDs){ #  #   cond.4.nofn(atbl, nbs, nbsIndex = T, #  #               classVector = atbl$RU_obj, #  #               conditions  = \"(regional_bpi>100|local_bpi>100|sd_bat{}>150)\", #  #               fn_perc     = 1, #               min.border  = 0.2, #  #               # CONDITIONS APPLIED TO NEIGHBORS OF OBJECT i #               class       = i, #               nbs_of      = i, #   ) # }"},{"path":"https://ghtaranto.github.io/scapesClassification/articles/scapesClassification_02_4_OBJ.html","id":"homogeneous-growth","dir":"Articles","previous_headings":"2.2 RU-objects: refine borders","what":"Homogeneous growth","title":"Independent objects on raster surfaces","text":"order grant homogeneous growth different RU-objects use function cond.4.nofn() argument max.iter=1, loop loop: iteration loop, run loop; iteration loop, consider one RU-object; RU-object, cells contiguous RU-object (max.iter = 1) evaluated conditions classified part object conditions true; direct neighbors evaluated loop moves next iteration.","code":"# REFINE RU-OBJECTS RU_IDs <- unique(atbl$RU_obj) RU_IDs <- sort(RU_IDs[!is.na(RU_IDs)])  atbl$RU_obj2 <- atbl$RU_obj  ITR <- 0 while (ITR<15) {      # APPLY CONDITIONS TO ALL OBJECTS   for(i in RU_IDs){               # EXPAND RU BOUNDARIES     atbl$RU_obj2 <- cond.4.nofn(atbl, nbs, nbsIndex = T,                                                                                                    # CLASS VECTOR `atbl$RU_obj2`                                 classVector = atbl$RU_obj2,                                                                  # CONDITION STRING                                 conditions  = \"(regional_bpi>100|local_bpi>100|sd_bat>150)\",                                                                   # CONDITIONS ARE EVALUATED ONLY FOR THE DIRECT NEIGHBOURS OF OBJECT i                                 max.iter    = 1,                                                                   # CONDITIONS APPLIED TO NEIGHBORS OF OBJECT i                                 class       = i,                                 nbs_of      = i,                                                                  # a cell is classified if conditions are true AND if >20% of its neighboring cells belong to class i                                 min.border  = 0.2)             }      ITR <- ITR + 1L    }"},{"path":"https://ghtaranto.github.io/scapesClassification/articles/scapesClassification_02_4_OBJ.html","id":"fill-classification-holes","dir":"Articles","previous_headings":"2.2 RU-objects: refine borders","what":"Fill classification holes","title":"Independent objects on raster surfaces","text":"Finally, assume raster cell surrounded RU-object, part object. define cell surrounded 60% neighbors belong RU-object. class vector atbl$RU_obj2 converted raster layers using function cv.2.rast() plotted Figure 2.","code":"# FILL CLASSIFICATION HOLES for(i in RU_IDs){      atbl$RU_obj2 <- cond.4.nofn(atbl, nbs, nbsIndex = T,                                                               # `atbl$RU_obj2` class vector                               classVector = atbl$RU_obj2,                                                              # CONDITIONS APPLIED TO NEIGHBORS OF OBJECT i                               class       = i,                               nbs_of      = i,                                                              # CONDITIONS ARE ALWAYS TRUE                               conditions  = \"T\",                                                               # AT LEAST 60% OF NEIGHBORS BELONG TO CLASS i                               min.border  = 0.6)    }"},{"path":"https://ghtaranto.github.io/scapesClassification/articles/scapesClassification_02_4_OBJ.html","id":"ru-objects-class-vectors","dir":"Articles","previous_headings":"","what":"2.3 RU-objects: class vectors","title":"Independent objects on raster surfaces","text":"class vectors atbl$RU_obj atbl$RU_obj2 can saved *.RDS files.","code":"# PEAK CELLS length(unique(na.omit(atbl$RU_obj2))) ## [1] 18  # There are 18 RU-objects  # SAVE `atbl$RU_obj` # saveRDS(atbl$RU_obj, \"RU_obj.RDS\")  # SAVE `atbl$RU_obj2` # saveRDS(atbl$RU_obj2, \"RU_obj2.RDS\")"},{"path":"https://ghtaranto.github.io/scapesClassification/articles/scapesClassification_02_5_OBJ2.html","id":"ru-objects","dir":"Articles","previous_headings":"","what":"RU-objects","title":"Raster object manipulation","text":"previous article identified set relief unit objects (RU-objects) ([independent objects raster","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gerald H. Taranto. Author, maintainer.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Taranto G (2021). scapesClassification: Seascape Landscape Classification Using Environmental Data. R package version 1.0.","code":"@Manual{,   title = {scapesClassification: Seascape or Landscape Classification Using Environmental Data},   author = {Gerald H. Taranto},   year = {2021},   note = {R package version 1.0}, }"},{"path":"https://ghtaranto.github.io/scapesClassification/index.html","id":"what-is-scapesclassification-","dir":"","previous_headings":"","what":"Seascape or Landscape Classification Using Environmental Data","title":"Seascape or Landscape Classification Using Environmental Data","text":"scapesClassification R-package classification seascapes, landscapes geo-spaces based user-defined conditions. allows users translate task-oriented views spaces geographic objects computer representations.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/index.html","id":"how-does-scapesclassification-work","dir":"","previous_headings":"","what":"How does scapesClassification work?","title":"Seascape or Landscape Classification Using Environmental Data","text":"Geo-spaces classified using sets user-defined conditions. sets conditions, presented form conditional statements, can applied simultaneously sequentially. second alternative generally preferred. fact, rationale guided design scapesClassification better implemented considering multi-step classification processes: Geographic objects segments space can identified unique class (set classes); Generally, easier identify attributes distinctive portion class rather identify full range attributes ; Thus, distinctive attributes can used map initial set locations class. locations hereafter referred anchor locations; , becomes possible map location class considering intrinsic attributes, also spatial relationships anchor locations; particular, class contiguity class continuity can considered; Class contiguity. Qualitative /quantitative conditions define membership location class occur positions considered adjacent specific class; Class continuity. two adjacent locations assigned class using contiguity conditions, conditions can re-applied positions neighboring newly classified locations; Distinct classes can identified repeating process considering relationships expected exist among classified unclassified locations.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://ghtaranto.github.io/scapesClassification/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://ghtaranto.github.io/scapesClassification/reference/anchor.cell.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify Raster Cells Based on Anchor Cells — anchor.cell","title":"Classify Raster Cells Based on Anchor Cells — anchor.cell","text":"Return classification vector based anchor cells.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/anchor.cell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify Raster Cells Based on Anchor Cells — anchor.cell","text":"","code":"anchor.cell(   attTbl,   rstack,   anchor,   class,   classVector = NULL,   class2cell = TRUE,   class2nbs = TRUE,   overwrite_class = FALSE,   plot = TRUE,   writeRaster = NULL,   overWrite = FALSE )"},{"path":"https://ghtaranto.github.io/scapesClassification/reference/anchor.cell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify Raster Cells Based on Anchor Cells — anchor.cell","text":"attTbl data.frame, attribute table returned function attTbl. rstack RasterStack RasterLayer object used compute attribute table (see attTbl). anchor integer vector, contains cell numbers considered anchor points. class numeric, class attribute cells meeting contiguity conditions. classVector numeric vector, defines cells attribute table already classified. class2cell logic, attribute new classification, defined argument class, anchor cells. class2nbs logic, attribute new classification, defined argument class, cells adjacent anchor cells. overwrite_class logic, reclassify cells already classified. plot logic, plot classVector. writeRaster filename, raster name provided save classVector raster file. overWrite logic, raster names already exist, existing file overwritten.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/anchor.cell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify Raster Cells Based on Anchor Cells — anchor.cell","text":"Update classVector new cells classified function. classVector provided, function return new classification vector.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/anchor.cell.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Classify Raster Cells Based on Anchor Cells — anchor.cell","text":"Classify cells rstack argument based anchor cells provided anchor. Return classification vector can indexed rstack using Cell column attribute table.","code":""},{"path":[]},{"path":"https://ghtaranto.github.io/scapesClassification/reference/anchor.seed.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Anchor Cells from Local Minima or Local Maxima — anchor.seed","title":"Set Anchor Cells from Local Minima or Local Maxima — anchor.seed","text":"Returns vector cell numbers locations local minima local maxima. cells can used anchor cells scapesClassification functions.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/anchor.seed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Anchor Cells from Local Minima or Local Maxima — anchor.seed","text":"","code":"anchor.seed(   attTbl,   ngbList,   nbsIndex = FALSE,   class = NULL,   cond.filter = NULL,   cond.seed,   sort.seed = NULL,   sort.col = NULL,   cond.growth = NULL,   lag.growth = Inf,   cond.isol = NULL,   lag.isol = 1,   classVector = NULL,   saveRDS = NULL,   overWrite = FALSE,   isolationClass = FALSE,   silent = FALSE )"},{"path":"https://ghtaranto.github.io/scapesClassification/reference/anchor.seed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Anchor Cells from Local Minima or Local Maxima — anchor.seed","text":"attTbl data.frame, attribute table returned function attTbl. ngbList list, contain list 8-neighbors cell attTbl$Cell (see ngbList). nbsIndex logic, ngbList contain neighbors index position attribute table (see ngbList). class numeric, numeric class attribute local minima maxima. NULL local minima maxima classified different number starting one. Buffers classification number local minima maxima refer. cond.filter character string, conditions define cells arguments cond.seed, cond.growth cond.isol evaluated. can NULL. Absolute conditions can used (see conditions). cond.seed character string, conditions identify local maxima minima. condition similar \"variable_x ==   max(variable_x)\" \"variable_x == min(variable_x)\". NULL. sort.seed character, sort seeds based column values. \"max\" seeds evaluated maximum minimum. \"min\" seeds evaluated minimum maximum. sort.col character, column name attTbl sorting based . cond.growth character string, conditions define buffer around local maxima minima. can NULL. Absolute focal cell conditions can used (see conditions). lag.growth numeric, defines lag focal cell conditions cond.growth evaluated (see conditions). cond.isol character string, conditions define one local maxima minima isolated another. can NULL. Absolute focal cell conditions can used (see conditions). lag.isol numeric, defines lag focal cell conditions cond.isol evaluated (see conditions). classVector numeric vector, condition arguments refers previous classification, classification referred \"classVector\". saveRDS filename, file name provided save anchor cell vector RDS file. overWrite logic, RDS names already exist, existing files overwritten. isolationClass logic, return cells meeting isolation conditions (isolator cells) classified '-1'. silent logic, progress printed console.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/anchor.seed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Anchor Cells from Local Minima or Local Maxima — anchor.seed","text":"Classification vector.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/anchor.seed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Anchor Cells from Local Minima or Local Maxima — anchor.seed","text":"function implements algorithm identify local maxima minima based set conditions. possible identify local maxima minima considering subset cells using argument cond.filter. algorithm starts identifying cell(s) meeting conditions argument cond.seed. cell(s) can referred seed cell(s). cond.growth argument provided, cells around seed meeting conditions cond.growth also classified seed. algorithm continue looking new seed cells long among neighbors newly classified seed cells cells meet conditions cond.growth. next step, cells adjacent seed cells meeting conditions argument cond.isol classified isolator cells. seed cells, algorithm continue looking isolator cells long among neighbors newly classified isolator cells cells meet conditions cond.isol. cell classified either seed isolator, ignored successive iterations algorithm. cond.seed, cond.growth, cond.isol process repeated cells classified either seed isolator. evaluation cond.growth cond.isol follows node structure. Let us consider cond.growth example refer 'conditions cond.growth argument' simply cond. level_0 single node, cell previously classified seed. cell adjacent node level_0 evaluate positively cond represents node level_1. Suppose level_1 one nodes. algorithm considers first nodes looks neighbor cells evaluating positively cond. one cells , first node level_1 set referenceNode level_2. algorithm evaluates one cells adjacent first node level_2 evaluate positively cond. , first node level_2 set referenceNode level_3. algorithm continues way level_n none adjacent cells evaluate positively cond. point algorithm considers cells adjacent second node level_n-1. cell positive evaluation, second node level_n-1 set referenceNode level_n algorithm continues described . contrary, none cells evaluate positively cond, algorithm remain level_n-1 consider next node. none nodes level_n-1 neighboring cell evaluating positively cond, algorithm move level_n-2. evaluation cond.growth stop algorithm returns level_0. implementation allows track back level_0 connected cells positive evaluation. conditions relative focal cell considered (see conditions), arguments lag.growth lag.isol determine referenceNode newly evaluated cells compared . lag 1 indicates conditions level_n evaluated considering referenceNode level_n-1. lag set Inf indicates level conditions evaluated considering initial node cell level_0. lag greater level evaluation occurs, conditions evaluated considering initial node cell level_0 (e.g., level_1, lag = 2).","code":""},{"path":[]},{"path":"https://ghtaranto.github.io/scapesClassification/reference/anchor.svo.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Anchor Cells from Spatial Vector Objects — anchor.svo","title":"Set Anchor Cells from Spatial Vector Objects — anchor.svo","text":"Returns vector cell numbers overlapping locations spatial vector data. cells can used anchor cells scapesClassification functions.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/anchor.svo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Anchor Cells from Spatial Vector Objects — anchor.svo","text":"","code":"anchor.svo(   rstack,   spatial_vector_name,   only_NAs = FALSE,   fill_NAs = FALSE,   plot = TRUE,   saveRDS = NULL,   writeRaster = NULL,   overWrite = FALSE )"},{"path":"https://ghtaranto.github.io/scapesClassification/reference/anchor.svo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Anchor Cells from Spatial Vector Objects — anchor.svo","text":"rstack Raster* object. spatial_vector_name OGR data source name. only_NAs logic, return cell numbers overlapping spatial vector data missing values rstack. fill_NAs logic, return cell numbers cells adjacent overlapping spatial vector data missing values rstack. plot logic, plot anchor points. saveRDS filename, file name provided save anchor cell vector RDS file. writeRaster filename, raster name provided save anchor cell vector raster file. overWrite logic, RDS raster names already exist, existing files overwritten.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/anchor.svo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Anchor Cells from Spatial Vector Objects — anchor.svo","text":"anchor cell vector.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/anchor.svo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Anchor Cells from Spatial Vector Objects — anchor.svo","text":"arguments only_NA fillNAs FALSE output equivalent output function raster::extract() raster whose values cell numbers. Cell numbers start 1 upper-left corner increase left right top bottom.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/attTbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Raster Object to Data Frame — attTbl","title":"Raster Object to Data Frame — attTbl","text":"Returns attribute table (data.frame) used scapesClassification functions. row corresponds cell Raster* object.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/attTbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raster Object to Data Frame — attTbl","text":"","code":"attTbl(rstack, var_names = NULL)"},{"path":"https://ghtaranto.github.io/scapesClassification/reference/attTbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raster Object to Data Frame — attTbl","text":"rstack Raster* object. var_names character vector, re-name variables Raster* object data.frame.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/attTbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raster Object to Data Frame — attTbl","text":"data.frame","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/attTbl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Raster Object to Data Frame — attTbl","text":"Returns data.frame number columns equal number layers rstack plus one maximum number rows equal number cells rstack. first column, named 'Cell', refers positions Raster* object complete cases, .e., raster cells value every layer stack.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/attTbl.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Raster Object to Data Frame — attTbl","text":"attribute table contains complete cases, .e., raster cells value every layer stack.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/attTbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raster Object to Data Frame — attTbl","text":"","code":"## r1, raster with cell numbers as values r1 <- raster::raster(matrix(1:12, nrow = 3, ncol = 4, byrow = TRUE))  ## r2, raster with missing values in cell numbers 1 and 2 r2 <- raster::raster(matrix(1, nrow = 3, ncol = 4, byrow = TRUE)) r2[c(1,2)] <- NA  attTbl(raster::stack(r1,r2)) #>    Cell layer.1 layer.2 #> 1     3       3       1 #> 2     4       4       1 #> 3     5       5       1 #> 4     6       6       1 #> 5     7       7       1 #> 6     8       8       1 #> 7     9       9       1 #> 8    10      10       1 #> 9    11      11       1 #> 10   12      12       1 attTbl(raster::stack(r1,r2), var_names = c(\"var_r1\", \"var_r2\")) #>    Cell var_r1 var_r2 #> 1     3      3      1 #> 2     4      4      1 #> 3     5      5      1 #> 4     6      6      1 #> 5     7      7      1 #> 6     8      8      1 #> 7     9      9      1 #> 8    10     10      1 #> 9    11     11      1 #> 10   12     12      1"},{"path":"https://ghtaranto.github.io/scapesClassification/reference/classify.all.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify All Unclassified Cells — classify.all","title":"Classify All Unclassified Cells — classify.all","text":"Classify cells classVector yet classified based contiguity conditions.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/classify.all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify All Unclassified Cells — classify.all","text":"","code":"classify.all(attTbl, ngbList, nbsIndex = FALSE, classVector)"},{"path":"https://ghtaranto.github.io/scapesClassification/reference/classify.all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify All Unclassified Cells — classify.all","text":"attTbl data.frame, attribute table returned function attTbl. ngbList list, contain list 8-neighbors cell attTbl$Cell (see ngbList). nbsIndex logic, ngbList contain neighbors index position attribute table (see ngbList). classVector numeric vector, defines cells attribute table already classified.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/classify.all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify All Unclassified Cells — classify.all","text":"Update classVector new cells classified function.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/classify.all.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Classify All Unclassified Cells — classify.all","text":"unclassified cell 8-cell neighborhood considered. Among neighbors, class highest number members assigned unclassified cell. two classes number members one classes assigned randomly unclassified cell. none neighbors classified class assigned unclassified cell.","code":""},{"path":[]},{"path":"https://ghtaranto.github.io/scapesClassification/reference/cond.4.all.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Conditions for All Cells — cond.4.all","title":"Test Conditions for All Cells — cond.4.all","text":"Evaluate conditions cells already classified classify conditions true.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/cond.4.all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Conditions for All Cells — cond.4.all","text":"","code":"cond.4.all(   attTbl,   conditions,   classVector = NULL,   class,   overwrite_class = FALSE )"},{"path":"https://ghtaranto.github.io/scapesClassification/reference/cond.4.all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Conditions for All Cells — cond.4.all","text":"attTbl data.frame, attribute table returned function attTbl. conditions character string, conditions cell meet classified indicated argument class. Absolute conditions can used (see conditions). classVector numeric vector, defines cells attribute table already classified. class numeric, numeric class attribute cells meeting conditions. overwrite_class logic, reclassify cells already classified.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/cond.4.all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Conditions for All Cells — cond.4.all","text":"Update classVector new cells classified function. classVector provided, function return new classification vector.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/cond.4.all.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Conditions for All Cells — cond.4.all","text":"function evaluates conditions argument conditions cells already classified. cells conditions TRUE classified indicted argument class.","code":""},{"path":[]},{"path":"https://ghtaranto.github.io/scapesClassification/reference/cond.4.nofn.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Conditions for Neighbors and Neighbors of Neighbors — cond.4.nofn","title":"Test Conditions for Neighbors and Neighbors of Neighbors — cond.4.nofn","text":"Evaluate conditions cells neighboring specific classes classify conditions TRUE.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/cond.4.nofn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Conditions for Neighbors and Neighbors of Neighbors — cond.4.nofn","text":"","code":"cond.4.nofn(   attTbl,   ngbList,   nbsIndex = FALSE,   classVector,   nbs_of,   conditions,   class,   min.border = NULL,   overwrite_class = FALSE,   max.iter = +Inf,   fn_perc = 1,   directional = T )"},{"path":"https://ghtaranto.github.io/scapesClassification/reference/cond.4.nofn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Conditions for Neighbors and Neighbors of Neighbors — cond.4.nofn","text":"attTbl data.frame, attribute table returned function attTbl. ngbList list, contain list 8-neighbors cell attTbl$Cell (see ngbList). nbsIndex logic, ngbList contain neighbors index position attribute table (see ngbList). classVector numeric vector, defines cells attribute table already classified. nbs_of numeric numeric vector, indicates neighbors classes evaluated. includes class argument class, function evaluate conditions also neighbors neighbors. conditions character string, conditions cell meet classified indicated argument class. Absolute, focal cell focal neighborhood conditions can used. Condition strings can include one neighborhood condition (see conditions). class numeric, numeric class attribute cells meeting conditions. min.border numeric value 0 1. indicates minimum percentage cells adjacent cell evaluation belong one classes nbs_of. one, neighboring cells belong one classes nbs_of cell evaluation classified class. overwrite_class logic, reclassify cells already classified. max.iter integer, maximum number iterations. fn_perc numeric value 0 1. neighborhood conditions considered, determines percentage cells neighborhood conditions true order classify cell evaluated indicted argument class (see conditions). directional logic, directional neighbors considered test neighborhood conditions. argument fn_perc also consider directional neighbors (see conditions).","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/cond.4.nofn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Conditions for Neighbors and Neighbors of Neighbors — cond.4.nofn","text":"Update classVector new cells classified function.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/cond.4.nofn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Conditions for Neighbors and Neighbors of Neighbors — cond.4.nofn","text":"function evaluates conditions argument conditions cells neighboring cells classified one classes included nbs_of. argument nbs_of includes class argument class, iteration function evaluate among neighbors newly classified cells cells meeting conditions classify accordingly.","code":""},{"path":[]},{"path":"https://ghtaranto.github.io/scapesClassification/reference/cond.reclass.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Conditions and Reclassify — cond.reclass","title":"Test Conditions and Reclassify — cond.reclass","text":"Evaluate conditions cells class reclassify conditions true.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/cond.reclass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Conditions and Reclassify — cond.reclass","text":"","code":"cond.reclass(   attTbl,   ngbList = NULL,   nbsIndex = FALSE,   classVector,   conditions,   class,   reclass,   fn_perc = 1 )"},{"path":"https://ghtaranto.github.io/scapesClassification/reference/cond.reclass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Conditions and Reclassify — cond.reclass","text":"attTbl data.frame, attribute table returned function attTbl. ngbList list, contain list 8-neighbors cell attTbl$Cell (see ngbList). conditions include focal neighborohood conditions argument can NULL (see conditions). nbsIndex logic, ngbList contain neighbors index position attribute table (see ngbList). classVector numeric vector, defines cells attribute table already classified. conditions character string, conditions cell meet classified indicated argument reclass. Absolute focal neighborhood conditions can used (see conditions). class numeric numeric vector, indicates classes conditions evaluated. reclass numeric, numeric class attribute cells meeting conditions. fn_perc numeric value 0 1. focal neighborhood condition considered, determines percentage cells focal neighborhood conditions TRUE order classify cell evaluated indicted argument reclass (see conditions).","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/cond.reclass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Conditions and Reclassify — cond.reclass","text":"Update classVector new cells classified function.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/cond.reclass.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Conditions and Reclassify — cond.reclass","text":"function evaluates conditions argument conditions cells classes argument class. cells conditions true reclassified indicted argument reclass.","code":""},{"path":[]},{"path":"https://ghtaranto.github.io/scapesClassification/reference/conditions.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Conditions — conditions","title":"Check Conditions — conditions","text":"Check spelling syntax errors conditions evaluate type conditions used.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/conditions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Conditions — conditions","text":"","code":"conditions(names_attTbl, cond, silent = FALSE)"},{"path":"https://ghtaranto.github.io/scapesClassification/reference/conditions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Conditions — conditions","text":"names_attTbl character vector, column (.e. variable) names attribute table returned function attTbl. cond character string, set conditions used classify raster cells (see cond.4.nofn, cond.reclass, cond.4.anchor.seed). silent logic, returns error messages.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/conditions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Conditions — conditions","text":"error message character string spelling syntax errors found message detailing types conditions found.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/conditions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check Conditions — conditions","text":"Conditions  Conditions passed scapesClassification functions single character string. can consist combination arithmetic (+|-|*|/|^|%%|%/%), relational (>|<|>=|<=|==|!=|%/%) logic operators (&||), base R functions (e.g., abs(variable_name)), variables names (.e., names(attTbl)) class vectors (referred \"classVector\").  combination absolute relative conditions can used, one neighborhood condition per string allowed. order avoid errors, always possible evaluate conditions TRUE FALSE substituting variable names numeric values. variables interest addressed conditions argument name. Evaluation conditions  way conditions evaluated depends type condition type function used. class contiguity considered (.e., functions without argument nbs_of) absolute conditions can used. evaluation vectorized exclude cells already classified (.e., (!.na(classVector))), unless argument overwrite_class TRUE. function cond.reclass can evaluate absolute focal neighborhood conditions, evaluate directional neighborhood conditions (see functions cond.4.cond.reclass).  class contiguity considered (.e., functions argument nbs_of anchor.seed), absolute relative conditions can used. evaluation iterative. iteration, conditions evaluated 8-neighbors one cells classified nbs_of. Neighbors already classified excluded evaluation (.e., (!.na(classVector))), unless argument overwrite_class TRUE (see functions anchor.seed cond.4.nofn). classification functions condition argument. functions consider class contiguity classify raster cells (see functions anchor.cell, anchor.svo, reclass.nbs classify.).  Hereinafter following definitions adopted (see also example section): focal cell: cell included classes argument nbs_of whose neighbors evaluation; nbs cell: one neighbors evaluation; focal neighborhood: absolute focal neighborhood conditions used, includes nbs 8 neighbors; relative focal neighborhood conditions used, includes 8 neighbors nbs. directional neighborhood: consists intersection set focal cell neighbors focal   neighborhood. absolute focal neighborhood conditions used, includes nbs, include focal cell; relative focal neighborhood conditions used, includes focal cell, include nbs. Absolute conditions  type condition applies functions conditions argument. compares variables (including \"classVector\") numeric values. class contiguity considered, cells meeting absolute conditions receive classification number. class contiguity considered, nbs meeting absolute conditions receive classification number. Examples valid conditions: \"variable_A > 1 & variable_B != 0\"; \"(variable_A^2 < 50 & variable_B == 0) | abs(variable_C) > 50\". Functions: anchor.seed, cond.4., cond.4.nofn cond.reclass. Absolute focal neighborhood conditions  type condition applies functions cond.4.nofn cond.reclass. compares cell focal   neighborhood numeric value. argument fn_perc controls percentage evaluations TRUE order assign classification number nbs. function cond.4.nofn can consider directional neighborhood instead focal neighborhood. type condition flagged variable name followed curly brackets (.e., \"variable_name{}\"), curly brackets indicate focal directional neighborhood considered iteration. Example valid conditions: \"variable_A{} > 1 &   abs(variable_B) != 0\". Functions: cond.4.nofn cond.reclass. Focal cell conditions.  type condition applies functions considering class contiguity conditions argument. compares value nbs value focal cell. type condition flagged variable name followed square brackets (.e., \"variable_name[]\"), square brackets indicate focal cell. Examples valid conditions: \"variable_A >   variable_A[]\"; \"(variable_A > variable_A[] & variable_B{} < 10) |   variable_C > 1\".  Note last example combination absolute focal cell conditions. Functions: anchor.seed cond.4.nofn. Relative focal neighborhood conditions.  type condition applies functions cond.4.nofn cond.reclass. compares cell focal neighborhood nbs. argument fn_perc controls percentage evaluations TRUE order assign classification number nbs. function cond.4.nofn can consider directional   neighborhood instead focal neighborhood. type condition flagged variable name followed curly brackets (.e., \"variable_name{}\"), curly brackets indicate focal directional neighborhood considered iteration. Example valid conditions: \"variable_A >   variable_A{}\"; \"(variable_A > variable_A{} & variable_B !=   variable_B[]) | variable_C > 1\". Note last example combination absolute, focal cell focal neighborhood conditions. Functions: cond.4.nofn cond.reclass","code":""},{"path":[]},{"path":"https://ghtaranto.github.io/scapesClassification/reference/conditions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Conditions — conditions","text":"","code":"# EXAMPLES OF VALID AND INVALID CONDITIONS:  names_attTbl <- c(\"bathymetry\", \"slope\") cond <- \"bathymetry>10\" conditions(names_attTbl, cond) #> [1] \"'Absolute' condition type(s) detected).\" cond <- \"classVector != 1\" conditions(names_attTbl, cond) #> [1] \"'Class vector' condition type(s) detected).\" cond <- \"bathymetry[]>10 & abs(slope{}) < 5\" conditions(names_attTbl, cond) #> [1] \"'Focal cell' AND 'Focal neighborhood' condition type(s) detected).\" if (FALSE) cond <- \"thymetry[]>10 & abs(slpe{}) < 5\" conditions(names_attTbl, cond) #> [1] \"'Focal cell' AND 'Focal neighborhood' condition type(s) detected).\" cond <- \"bathymetry[]>10 & | abs(slope{}) < 5\" conditions(names_attTbl, cond) #> Error in conditions(names_attTbl, cond): Check: '|' -- Possible syntax error. cond <- \"bathymetry{}>10 & | abs(slope{}) < 5\" conditions(names_attTbl, cond) #> Error in conditions(names_attTbl, cond): Only one 'neighborhood' condition allowed.   # EXAMPLES OF FOCAL CELL, NBS CELLS AND NEIGHBORHOODS:  # Matrix m mocking a raster of 3 rows and 4 columns m <- matrix(1:12, nrow = 3, ncol = 4, byrow = TRUE) m #>      [,1] [,2] [,3] [,4] #> [1,]    1    2    3    4 #> [2,]    5    6    7    8 #> [3,]    9   10   11   12  # FOCAL CELL fc <- 6 fc #> [1] 6  # NBS CELLS nbs <- nbg8(3, 4)[[6]] nbs #> [1]  1  2  3  5  7  9 10 11  # CELL IN EVALUATION nbs1 <- nbs[1] nbs1 #> [1] 1  # FOCAL NEIGHBORHOOD # Absolute: ab_fn_nbs1 <- c(nbs1, nbg8(3, 4)[[1]]) ab_fn_nbs1 #> [1] 1 2 5 6  # Relative: r_fn_nbs1  <- c(nbg8(3, 4)[[1]]) r_fn_nbs1 #> [1] 2 5 6  # DIRECTIONAL FOCAL NEIGHBORHOOD # Absolute: ab_dfn_nbs1 <- c(nbs1, intersect(c(nbg8(3, 4)[[1]]) , nbg8(3, 4)[[6]])) ab_dfn_nbs1 #> [1] 1 2 5  # Relative: r_dfn_nbs1  <- c(fc, intersect(c(nbg8(3, 4)[[1]]) , nbg8(3, 4)[[6]])) r_dfn_nbs1 #> [1] 6 2 5"},{"path":"https://ghtaranto.github.io/scapesClassification/reference/cv.2.rast.html","id":null,"dir":"Reference","previous_headings":"","what":"Class Vector To Raster — cv.2.rast","title":"Class Vector To Raster — cv.2.rast","text":"Transform class vector raster.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/cv.2.rast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class Vector To Raster — cv.2.rast","text":"","code":"cv.2.rast(   r,   index,   classVector,   plot = FALSE,   writeRaster = NULL,   overWrite = FALSE )"},{"path":"https://ghtaranto.github.io/scapesClassification/reference/cv.2.rast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class Vector To Raster — cv.2.rast","text":"r Raster* object values classVector assigned raster cell numbers indicated index. remaining raster cells assigned NA values. index cell numbers element classVector correspond. classVector computed scapesClassificaton functions attribute table attTbl, argument correspond column attTbl$Cell attribute table. classVector numeric vector, values assigned raster cell numbers indicated index. plot logic, plot anchor classVector. writeRaster filename, raster name provided save classVector raster file. overWrite logic, overwrite existing raster.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/cv.2.rast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class Vector To Raster — cv.2.rast","text":"classVector transformed raster.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/nbg8.html","id":null,"dir":"Reference","previous_headings":"","what":"Eight Neighbors — nbg8","title":"Eight Neighbors — nbg8","text":"Return 8 neighbors, cell numbers, cell raster. Cell numbers start 1 upper-left corner increase left right top bottom.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/nbg8.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Eight Neighbors — nbg8","text":"","code":"nbg8(n_row, n_col)"},{"path":"https://ghtaranto.github.io/scapesClassification/reference/nbg8.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Eight Neighbors — nbg8","text":"n_row Integer. number rows Raster RasterStack object. n_col Integer. number columns Raster RasterStack object.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/nbg8.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Eight Neighbors — nbg8","text":"List length equal number cells raster. nth element list corresponds 8 adjacent cell numbers nth cell RasterStack object.","code":""},{"path":[]},{"path":"https://ghtaranto.github.io/scapesClassification/reference/nbg8.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Eight Neighbors — nbg8","text":"","code":"## Matrix m mocking a raster of 3 rows and 4 columns m <- matrix(1:12, nrow = 3, ncol = 4, byrow = TRUE) m #>      [,1] [,2] [,3] [,4] #> [1,]    1    2    3    4 #> [2,]    5    6    7    8 #> [3,]    9   10   11   12  nbs <- nbg8(3, 4) nbs #> $`1` #> [1] 2 5 6 #>  #> $`2` #> [1] 1 3 5 6 7 #>  #> $`3` #> [1] 2 4 6 7 8 #>  #> $`4` #> [1] 3 7 8 #>  #> $`5` #> [1]  1  2  6  9 10 #>  #> $`6` #> [1]  1  2  3  5  7  9 10 11 #>  #> $`7` #> [1]  2  3  4  6  8 10 11 12 #>  #> $`8` #> [1]  3  4  7 11 12 #>  #> $`9` #> [1]  5  6 10 #>  #> $`10` #> [1]  5  6  7  9 11 #>  #> $`11` #> [1]  6  7  8 10 12 #>  #> $`12` #> [1]  7  8 11 #>"},{"path":"https://ghtaranto.github.io/scapesClassification/reference/ngbList.html","id":null,"dir":"Reference","previous_headings":"","what":"Eight Neighbors for Complete Cases — ngbList","title":"Eight Neighbors for Complete Cases — ngbList","text":"function ngbList returns list 8-neighbors cells rstack complete cases (.e., cells without missing value). Neighbors identified cell numbers argument rNumb = FALSE positions attribute table (.e. row numbers) argument rNumb = TRUE argument attTbl != NULL (see attTbl).  list 8-neighbors named. rNumb = FALSE, names identify cell number neighborhood computed. rNumb = TRUE, names refers row indices. instance, name \"6\" can used call neighborhood cell number 6 rNumb = FALSE. However, rNumb = TRUE, name \"6\" can used call neighborhood raster cell stored 6th row attribute table attTbl. argument rNumb = TRUE, neighbors complete cases considered, .e. neighbor position correspond raster cell one missing values considered. Therefore, cell neighboring cells missing values, 8-neighbor vector cell zero-length.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/ngbList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Eight Neighbors for Complete Cases — ngbList","text":"","code":"ngbList(rstack, rNumb = FALSE, attTbl = NULL)"},{"path":"https://ghtaranto.github.io/scapesClassification/reference/ngbList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Eight Neighbors for Complete Cases — ngbList","text":"rstack Raster* object. rNumb logic, 8-neighbors cell identified row number attribute table (indicated argument attTbl). instance, cell 3 located row 2 identified number 2. attTbl data.frame, attribute table returned function attTbl. required argument rNumb =   TRUE","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/ngbList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Eight Neighbors for Complete Cases — ngbList","text":"Named list integer vectors.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/ngbList.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Eight Neighbors for Complete Cases — ngbList","text":"names list correspond focal cells (.character), integer vectors within list contain 8-neighbors focal cell. argument rNumb = FALSE, focal cells neighbors identified cell numbers. argument rNumb = TRUE, focal cells neighbors identified row numbers.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/ngbList.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Eight Neighbors for Complete Cases — ngbList","text":"correspondence indices attribute table (attTbl) indices 8-neighbors list. instance, first element 8-neighbors list corresponds neighbors cell whose values stored first row attribute table.","code":""},{"path":[]},{"path":"https://ghtaranto.github.io/scapesClassification/reference/ngbList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Eight Neighbors for Complete Cases — ngbList","text":"","code":"## r1, raster with cell numbers as values r1 <- raster::raster(matrix(1:12, nrow = 3, ncol = 4, byrow = TRUE))  ## r2, raster with missing values in cell numbers 1 and 2 r2 <- raster::raster(matrix(1, nrow = 3, ncol = 4, byrow = TRUE)) r2[c(1,2)] <- NA   ngbList(raster::stack(r1,r2)) #> $`3` #> [1] 2 4 6 7 8 #>  #> $`4` #> [1] 3 7 8 #>  #> $`5` #> [1]  1  2  6  9 10 #>  #> $`6` #> [1]  1  2  3  5  7  9 10 11 #>  #> $`7` #> [1]  2  3  4  6  8 10 11 12 #>  #> $`8` #> [1]  3  4  7 11 12 #>  #> $`9` #> [1]  5  6 10 #>  #> $`10` #> [1]  5  6  7  9 11 #>  #> $`11` #> [1]  6  7  8 10 12 #>  #> $`12` #> [1]  7  8 11 #>  matrix(1:12, nrow = 3, ncol = 4, byrow = TRUE) #>      [,1] [,2] [,3] [,4] #> [1,]    1    2    3    4 #> [2,]    5    6    7    8 #> [3,]    9   10   11   12"},{"path":"https://ghtaranto.github.io/scapesClassification/reference/obj.border.html","id":null,"dir":"Reference","previous_headings":"","what":"Geomorphic Units' Borders — obj.border","title":"Geomorphic Units' Borders — obj.border","text":"Takes input list elements representing geomorphic units identify border unit.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/obj.border.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geomorphic Units' Borders — obj.border","text":"","code":"obj.border(group, ngbList, silent = FALSE)"},{"path":"https://ghtaranto.github.io/scapesClassification/reference/obj.border.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geomorphic Units' Borders — obj.border","text":"group named list, element represents geomorphic unit. unit identified indices pointing raster cells attribute table compose unit (see attTbl). ngbList list, contain list 8-neighbors cell attTbl$Cell (see attTbl). list generated setting argument function ngbList index = TRUE (see ngbList). silent logic, progress bar printed console.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/obj.border.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geomorphic Units' Borders — obj.border","text":"function returns named list. element list represents geomorphic unit identified list's names, values element list consist indices. indices point rows attribute table correspond raster cells comprising borders. actual raster cells comprising borders can extracted attribute table (e.g. attTbl$Cell[indices]) (see attTbl).","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/obj.border.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Geomorphic Units' Borders — obj.border","text":"Note group named list whose names correspond geomorphic unit-IDs.","code":""},{"path":[]},{"path":"https://ghtaranto.github.io/scapesClassification/reference/obj.nbs.html","id":null,"dir":"Reference","previous_headings":"","what":"Geomorphic Units' Neighbors — obj.nbs","title":"Geomorphic Units' Neighbors — obj.nbs","text":"Identify units adjacent geomorphic units interest. adjacent unit, individual borders identified. function inputs outputs use indices pointing raster cells attribute table (see attTbl ngbList argument index = TRUE).","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/obj.nbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geomorphic Units' Neighbors — obj.nbs","text":"","code":"obj.nbs(grp.bord, ngbList, only_grp = NULL, silent = FALSE)"},{"path":"https://ghtaranto.github.io/scapesClassification/reference/obj.nbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geomorphic Units' Neighbors — obj.nbs","text":"grp.bord named list returned function obj.border. element list represents geomorphic unit identified list's names, values element list consist indices pointing rows attribute table correspond raster cells constituting border. ngbList list, contain list 8-neighbors cell attTbl$Cell (see attTbl). list generated setting argument function ngbList index = TRUE. (see ngbList). only_grp character vector, geomorphic unit-IDs provided character vector, ones considered. argument set NULL, geomorphic units included argument grp.bord considered. silent logic, progress bar printed console.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/obj.nbs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geomorphic Units' Neighbors — obj.nbs","text":"function returns named list. element list represent geomorphic unit identified list's names. element constituted nested named list. names nested lists IDs adjacent geomorphic units. values nested list consist indices. indices point rows attribute table (see attTbl) correspond raster cells mark border geomorphic unit adjacent unit. actual raster cells comprising borders can extracted attribute table (e.g. attTbl$Cell[indices]) (see attTbl).","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/reclass.nbs.html","id":null,"dir":"Reference","previous_headings":"","what":"Reclassify Neighbors — reclass.nbs","title":"Reclassify Neighbors — reclass.nbs","text":"members two classes contiguous, one reclassified.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/reclass.nbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reclassify Neighbors — reclass.nbs","text":"","code":"reclass.nbs(   attTbl,   ngbList,   nbsIndex = FALSE,   classVector,   nbs_of,   class,   reclass,   reclass_all = TRUE )"},{"path":"https://ghtaranto.github.io/scapesClassification/reference/reclass.nbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reclassify Neighbors — reclass.nbs","text":"attTbl data.frame, attribute table returned function attTbl. ngbList list, contain list 8-neighbors cell attTbl$Cell (see ngbList). nbsIndex logic, ngbList contain neighbors index position attribute table (see ngbList). classVector numeric vector, defines cells attribute table already classified. nbs_of numeric numeric vector, cell classified class adjacent cell classified indicated argument nbs_of, reclassified indicated argument reclass. class numeric numeric vector, indicates classes adjacent neighbors evaluated. reclass numeric, numeric class attribute cells meeting contiguity conditions. reclass_all logic, cells adjacent reclassified cell classified class reclassified indicated argument reclass.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/reclass.nbs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reclassify Neighbors — reclass.nbs","text":"Update classVector new cells classified function.","code":""},{"path":"https://ghtaranto.github.io/scapesClassification/reference/reclass.nbs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reclassify Neighbors — reclass.nbs","text":"function evaluates cell class class adjacent one classes argument nbs_of , TRUE, reclassifies indicated argument reclass. argument reclass_all TRUE, cells adjacent reclassified cell classified class also reclassified.","code":""},{"path":[]}]
